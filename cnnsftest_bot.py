import logging
import sqlite3
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext, ConversationHandler

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

TOKEN = '7293327941:AAE3gElHwSbbtvhaJbiDzcQvr-N_GO3gRFY'
CHAT_ID = '-1002624398086'

NICKNAME, POSITION, QUERY = range(3)

main_keyboard = ReplyKeyboardMarkup([
    ['–í–ª–∞–¥–µ–ª–µ—Ü —Ü–µ–Ω—Ç—Ä–∞ —Ä–µ–¥–∞–∫—Ü–∏–∏ ü§ù', '–ó–∞–≤–µ–¥—É—é—â–∏–π —Ü–µ–Ω—Ç—Ä–∞ —Ä–µ–¥–∞–∫—Ü–∏–∏‚úîÔ∏è'],
    ['–°–æ—Å—Ç–∞–≤ –∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª–µ–π üöö', '–¶–µ–Ω–æ–≤–∞—è –ø–æ–ª–∏—Ç–∏–∫–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π üí∞', '–ó–∞—è–≤–ª–µ–Ω–∏—è –Ω–∞ –ø–æ—Å—Ç –∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª—èü§µ‚Äç‚ôÇÔ∏è'],
    ['–í–æ–ø—Ä–æ—Å—ã/–∂–∞–ª–æ–±—ã/–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è', '–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏']
], resize_keyboard=True)

cancel_button = KeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å")
cancel_keyboard = ReplyKeyboardMarkup([[cancel_button]], resize_keyboard=True)

def connect_db():
    return sqlite3.connect('forms.db')

def create_table():
    conn = connect_db()
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS submissions (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            nickname TEXT,
            question TEXT,
            position TEXT
        )
    ''')
    conn.commit()
    conn.close()

async def start(update: Update, context: CallbackContext) -> None:
    if str(update.message.chat_id) == CHAT_ID:
        return

    await update.message.reply_text('–í—ã–±–µ—Ä–∏ –∫–Ω–æ–ø–∫—É, –∫–æ—Ç–æ—Ä–∞—è —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç', reply_markup=main_keyboard)

async def button_handler(update: Update, context: CallbackContext) -> None:
    if str(update.message.chat_id) == CHAT_ID:
        return

    user_choice = update.message.text
    if user_choice == '–í–æ–ø—Ä–æ—Å—ã/–∂–∞–ª–æ–±—ã/–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è':
        await start_query(update, context)
        return QUERY
    elif user_choice == '–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏':
        await start_booking(update, context)
        return NICKNAME
    elif user_choice == "–û—Ç–º–µ–Ω–∏—Ç—å":
        await update.message.reply_text("–ü—Ä–æ—Ü–µ—Å—Å –æ—Ç–º–µ–Ω–µ–Ω.", reply_markup=main_keyboard)
        context.user_data.clear()
        return ConversationHandler.END
    else:
        response = {
            '–í–ª–∞–¥–µ–ª–µ—Ü —Ü–µ–Ω—Ç—Ä–∞ —Ä–µ–¥–∞–∫—Ü–∏–∏ ü§ù': 'John_Moon - @attwood30',
            '–ó–∞–≤–µ–¥—É—é—â–∏–π —Ü–µ–Ω—Ç—Ä–∞ —Ä–µ–¥–∞–∫—Ü–∏–∏‚úîÔ∏è': 'Kaya_Murphy - @bbtatti',
            '–°–æ—Å—Ç–∞–≤ –∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª–µ–π üöö': 'Amsterdam_Forever - @sssk2226 \nDanill_Lester - @bebramanm \nJuggernaut_Kushida - @Dgust1n',
            '–¶–µ–Ω–æ–≤–∞—è –ø–æ–ª–∏—Ç–∏–∫–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π üí∞': '6 —Ä–∞–Ω–≥ - 5–û.–û–û–û.–û–û–û$/–º–µ—Å—è—Ü \n 7 —Ä–∞–Ω–≥ - 7–û.–û–û–û.–û–û–û$/–º–µ—Å—è—Ü \n 8 —Ä–∞–Ω–≥ - I2O.OOO.OOO$/–º–µ—Å—è—Ü',
            '–ó–∞—è–≤–ª–µ–Ω–∏—è –Ω–∞ –ø–æ—Å—Ç –∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª—èü§µ‚Äç‚ôÇÔ∏è': '–î–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–ª–Ω–∏–µ –Ω–∞ –ø–æ—Å—Ç –∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª—è - –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –ó–∞–≤–µ–¥—É—é—â–µ–º—É —Ü–µ–Ω—Ç—Ä–∞ —Ä–µ–¥–∞–∫—Ü–∏–∏ - @bbtatti'
        }.get(user_choice)
        if response:
            await update.message.reply_text(response)
        else:
            await update.message.reply_text('–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.', reply_markup=main_keyboard)
        return ConversationHandler.END

async def start_booking(update: Update, context: CallbackContext) -> int:
    if str(update.message.chat_id) == CHAT_ID:
        return

    await update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –ù–∏–∫–Ω–µ–π–º:', reply_markup=cancel_keyboard)
    return NICKNAME

async def nickname_handler(update: Update, context: CallbackContext) -> int:
    if str(update.message.chat_id) == CHAT_ID:
        return

    if update.message.text == "–û—Ç–º–µ–Ω–∏—Ç—å":
        await update.message.reply_text("–ü—Ä–æ—Ü–µ—Å—Å –æ—Ç–º–µ–Ω–µ–Ω.", reply_markup=main_keyboard)
        context.user_data.clear()
        return ConversationHandler.END

    context.user_data['nickname'] = update.message.text
    await update.message.reply_text('–£–∫–∞–∂–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å (6, 7 –∏–ª–∏ 8):', reply_markup=cancel_keyboard)
    return POSITION

async def position_handler(update: Update, context: CallbackContext) -> int:
    if str(update.message.chat_id) == CHAT_ID:
        return

    if update.message.text == "–û—Ç–º–µ–Ω–∏—Ç—å":
        await update.message.reply_text("–ü—Ä–æ—Ü–µ—Å—Å –æ—Ç–º–µ–Ω–µ–Ω.", reply_markup=main_keyboard)
        context.user_data.clear()
        return ConversationHandler.END

    position = update.message.text.strip()
    if position in ['6', '7', '8']:
        context.user_data['position'] = position
        conn = connect_db()
        cursor = conn.cursor()
        cursor.execute('INSERT INTO submissions (nickname, position) VALUES (?, ?)',
                       (context.user_data['nickname'], position))
        conn.commit()
        conn.close()

        username = update.message.from_user.username if update.message.from_user.username else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        
        await context.bot.send_message(
            CHAT_ID, 
            f'–ù–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: {context.user_data["nickname"]}, –î–æ–ª–∂–Ω–æ—Å—Ç—å: {position}\n–Æ–∑–µ—Ä–Ω–µ–π–º: @{username}'
        )

        await update.message.reply_text('–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!', reply_markup=main_keyboard)
        context.user_data.clear()
        return ConversationHandler.END
    else:
        await update.message.reply_text('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å. –í—ã–±–µ—Ä–∏—Ç–µ 6, 7 –∏–ª–∏ 8.', reply_markup=cancel_keyboard)
        return POSITION

async def start_query(update: Update, context: CallbackContext) -> int:
    if str(update.message.chat_id) == CHAT_ID:
        return

    await update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –ù–∏–∫–Ω–µ–π–º –∏ –≤–æ–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ù–∏–∫–Ω–µ–π–º, –í–∞—à –≤–æ–ø—Ä–æ—Å):', reply_markup=cancel_keyboard)
    return QUERY

async def query_handler(update: Update, context: CallbackContext) -> int:
    if str(update.message.chat_id) == CHAT_ID:
        return

    if update.message.text == "–û—Ç–º–µ–Ω–∏—Ç—å":
        await update.message.reply_text("–ü—Ä–æ—Ü–µ—Å—Å –æ—Ç–º–µ–Ω–µ–Ω.", reply_markup=main_keyboard)
        context.user_data.clear()
        return ConversationHandler.END

    try:
        nickname, question = map(str.strip, update.message.text.split(',', 1))
        conn = connect_db()
        cursor = conn.cursor()
        cursor.execute('INSERT INTO submissions (nickname, question) VALUES (?, ?)', (nickname, question))
        conn.commit()
        conn.close()

        username = update.message.from_user.username if update.message.from_user.username else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        
        await context.bot.send_message(
            CHAT_ID, 
            f'–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å: {nickname}, –í–æ–ø—Ä–æ—Å: {question}\n–Æ–∑–µ—Ä–Ω–µ–π–º: @{username}'
        )

        await update.message.reply_text(f'–í–∞—à –≤–æ–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç! –ù–∏–∫–Ω–µ–π–º: {nickname}, –í–æ–ø—Ä–æ—Å: {question}', reply_markup=main_keyboard)
        context.user_data.clear()
        return ConversationHandler.END
    except ValueError:
        await update.message.reply_text('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.')
        return QUERY

def main() -> None:
    create_table()
    application = Application.builder().token(TOKEN).build()

    conv_handler_booking = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex('^–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏$'), start_booking)],
        states={
            NICKNAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, nickname_handler)],
            POSITION: [MessageHandler(filters.TEXT & ~filters.COMMAND, position_handler)]
        },
        fallbacks=[MessageHandler(filters.TEXT & ~filters.COMMAND, button_handler)]
    )

    conv_handler_query = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex('^–í–æ–ø—Ä–æ—Å—ã/–∂–∞–ª–æ–±—ã/–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è$'), start_query)],
        states={
            QUERY: [MessageHandler(filters.TEXT & ~filters.COMMAND, query_handler)]
        },
        fallbacks=[MessageHandler(filters.TEXT & ~filters.COMMAND, button_handler)]
    )

    application.add_handler(CommandHandler('start', start))
    application.add_handler(conv_handler_booking)
    application.add_handler(conv_handler_query)
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, button_handler))

    application.run_polling()

if __name__ == '__main__':
    main()
